# Script d'installation PowerShell pour l'Interface Pipeline √âchographique
Write-Host "üî¨ Installation de l'Interface Pipeline √âchographique" -ForegroundColor Cyan
Write-Host "==================================================" -ForegroundColor Cyan

# V√©rifier que Node.js est install√©
try {
    $nodeVersion = node -v
    Write-Host "‚úÖ Node.js version $nodeVersion d√©tect√©e" -ForegroundColor Green
    
    # V√©rifier la version
    $versionNumber = [int]($nodeVersion -replace "v(\d+)\..*", '$1')
    if ($versionNumber -lt 18) {
        Write-Host "‚ùå Node.js version 18+ requise. Version actuelle: $nodeVersion" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Node.js n'est pas install√©. Veuillez installer Node.js 18+ depuis https://nodejs.org/" -ForegroundColor Red
    exit 1
}

# Installer les d√©pendances
Write-Host "üì¶ Installation des d√©pendances..." -ForegroundColor Yellow
npm install

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erreur lors de l'installation des d√©pendances" -ForegroundColor Red
    exit 1
}

# Copier le fichier d'environnement
if (-not (Test-Path ".env.local")) {
    Write-Host "üìù Cr√©ation du fichier de configuration..." -ForegroundColor Yellow
    Copy-Item ".env.example" ".env.local"
    Write-Host "‚úÖ Fichier .env.local cr√©√©. Modifiez les chemins des mod√®les selon votre configuration." -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è  Fichier .env.local existe d√©j√†" -ForegroundColor Yellow
}

# Cr√©er les dossiers temporaires
Write-Host "üìÅ Cr√©ation des dossiers temporaires..." -ForegroundColor Yellow
New-Item -ItemType Directory -Path "temp\uploads" -Force | Out-Null
New-Item -ItemType Directory -Path "temp\outputs" -Force | Out-Null

# V√©rification des mod√®les
Write-Host "üß† V√©rification des mod√®les..." -ForegroundColor Yellow
$modelsDir = "C:\Users\ASUS\Desktop\Final\models"
if (Test-Path $modelsDir) {
    Write-Host "‚úÖ Dossier des mod√®les trouv√©: $modelsDir" -ForegroundColor Green
    
    # Lister les mod√®les disponibles
    Write-Host "üìã Mod√®les disponibles:" -ForegroundColor Cyan
    $models = Get-ChildItem -Path $modelsDir -Filter "*.pth" -ErrorAction SilentlyContinue
    if ($models.Count -gt 0) {
        $models | ForEach-Object { Write-Host "   - $($_.Name)" -ForegroundColor White }
    } else {
        Write-Host "‚ö†Ô∏è  Aucun fichier .pth trouv√© dans $modelsDir" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ö†Ô∏è  Dossier des mod√®les non trouv√©: $modelsDir" -ForegroundColor Yellow
    Write-Host "   Assurez-vous que vos mod√®les entra√Æn√©s sont dans ce dossier" -ForegroundColor Gray
}

Write-Host ""
Write-Host "üéâ Installation termin√©e!" -ForegroundColor Green
Write-Host ""
Write-Host "üöÄ Pour d√©marrer l'application:" -ForegroundColor Cyan
Write-Host "   npm run dev" -ForegroundColor White
Write-Host ""
Write-Host "üåê L'application sera disponible sur:" -ForegroundColor Cyan
Write-Host "   http://localhost:3000" -ForegroundColor White
Write-Host ""
Write-Host "üîß Configuration:" -ForegroundColor Cyan
Write-Host "   - Modifiez .env.local pour adapter les chemins des mod√®les" -ForegroundColor Gray
Write-Host "   - Assurez-vous que Python et PyTorch sont install√©s pour l'int√©gration backend" -ForegroundColor Gray
Write-Host ""
Write-Host "üìö Commandes disponibles:" -ForegroundColor Cyan
Write-Host "   npm run dev      - D√©marrer en mode d√©veloppement" -ForegroundColor Gray
Write-Host "   npm run build    - Construire pour la production" -ForegroundColor Gray
Write-Host "   npm run start    - D√©marrer en mode production" -ForegroundColor Gray
Write-Host "   npm run lint     - V√©rifier le code" -ForegroundColor Gray
Write-Host ""

# Pause pour que l'utilisateur puisse lire
Write-Host "Appuyez sur une touche pour continuer..." -ForegroundColor Yellow
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
